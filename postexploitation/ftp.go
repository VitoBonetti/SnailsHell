package postexploitation

import (
	"SnailsHell/model"
	"fmt"
	"time"

	"github.com/jlaffaye/ftp"
)

// CheckFTPAnonymousLogin attempts to log in to an FTP server as an anonymous user.
func CheckFTPAnonymousLogin(host *model.Host) {
	for portID, port := range host.Ports {
		// Target common FTP ports
		if port.Service == "ftp" || portID == 21 {
			var ip string
			for hostIP := range host.IPv4Addresses {
				ip = hostIP
				break
			}
			if ip == "" {
				continue
			}

			addr := fmt.Sprintf("%s:%d", ip, portID)
			result := model.FTPResult{
				PortID:  portID,
				Address: addr,
			}

			c, err := ftp.Dial(addr, ftp.DialWithTimeout(10*time.Second))
			if err != nil {
				result.Status = "Connection failed"
				result.Error = err.Error()
				host.FTPResults = append(host.FTPResults, result)
				continue
			}

			err = c.Login("anonymous", "anonymous@example.com")
			if err != nil {
				result.Status = "Anonymous login failed"
				result.Error = err.Error()
				host.FTPResults = append(host.FTPResults, result)
				c.Quit()
				continue
			}

			result.Status = "Anonymous login successful"
			result.AnonymousLoginPossible = true

			pwd, err := c.CurrentDir()
			if err == nil {
				result.CurrentDir = pwd
			}

			entries, err := c.List("")
			if err == nil {
				for _, entry := range entries {
					result.DirectoryListing = append(result.DirectoryListing, fmt.Sprintf("%s %d %s", entry.Name, entry.Size, entry.Time.Format("Jan 2 15:04")))
				}
			}

			host.FTPResults = append(host.FTPResults, result)
			c.Quit()
		}
	}
}
