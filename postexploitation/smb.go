package postexploitation

import (
	"SnailsHell/model"
	"fmt"
	"net"
	"time"

	"github.com/hirochachacha/go-smb2"
)

// CheckSMBUnauthenticatedAccess attempts to connect to an SMB server and list shares.
func CheckSMBUnauthenticatedAccess(host *model.Host) {
	for portID, port := range host.Ports {
		// Target common SMB ports
		if port.Service == "netbios-ssn" || port.Service == "microsoft-ds" || portID == 139 || portID == 445 {
			var ip string
			for hostIP := range host.IPv4Addresses {
				ip = hostIP
				break
			}
			if ip == "" {
				continue
			}

			addr := fmt.Sprintf("%s:%d", ip, portID)
			result := model.SMBResult{
				PortID:  portID,
				Address: addr,
			}

			conn, err := net.DialTimeout("tcp", addr, 10*time.Second)
			if err != nil {
				result.Status = "Connection failed"
				result.Error = err.Error()
				host.SMBResults = append(host.SMBResults, result)
				continue
			}

			d := &smb2.Dialer{
				Initiator: &smb2.NTLMInitiator{
					User:     "",
					Password: "",
				},
			}

			s, err := d.Dial(conn)
			if err != nil {
				result.Status = "Authentication failed"
				result.Error = err.Error()
				host.SMBResults = append(host.SMBResults, result)
				continue
			}
			defer s.Logoff()

			result.Successful = true
			result.Status = "Unauthenticated login successful"

			names, err := s.ListSharenames()
			if err != nil {
				result.Error = "Failed to list shares: " + err.Error()
			} else {
				result.Shares = names
			}

			host.SMBResults = append(host.SMBResults, result)
		}
	}
}
